@mixin breakpointsMaxW($bp) {
  @media (max-width: $bp) {
    @content;
  }
}

@mixin breakpointsMinW($bp) {
  @media (min-width: $bp) {
    @content;
  }
}

@mixin breakpointsMaxH($bp) {
  @media (max-height: $bp) and (orientation: landscape) {
    @content;
  }
}

@mixin afterIcon($image, $w, $h) {
  background-image: $image;
  width: $w;
  height: $h;
}

@mixin background($size) {
  background: {
    repeat: no-repeat;
    position: center;
    size: $size;
  }
}

@mixin img($size) {
  width: 100%;
  height: 100%;
  object-fit: $size;
}

@mixin backgroundImage($image, $size) {
  background: {
    image: $image;
    repeat: no-repeat;
    position: center;
    size: $size;
  }
}

@mixin maskImage($image, $size) {
  mask: $image no-repeat center/$size;
}

@mixin elDef() {
  position: absolute;
  content: '';
}

@mixin line-clamp($lines: 1) {
  @if $lines <=1 {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
  }
}

$maxWidth: 1920;
$maxWidthContainer: 1300;

@mixin adaptive-value($property, $starSize, $minSize, $type) {
  $addSize: $starSize - $minSize;

  @if $type==1 {
    #{$property}: $starSize + px;

    @media (max-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize} *
          ((100vw - 375px) / #{$maxWidthContainer - 375})
      );
    }
  } @else if $type==2 {
    #{$property}: $starSize + px;

    @media (min-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize} * ((100vw - 375px) / #{$maxWidth - 375})
      );
    }
  } @else {
    #{$property}: calc(
      #{$minSize + px} + #{$addSize} * ((100vw - 375px) / #{$maxWidth - 375})
    );
  }
}

//  margin-bottom: calc(28px + (36 - 28) * ((100vw - 320px) / (1300 - 320)));
//  right: max(15px, calc((100% - 1400px) / 2));

// * BUTTONS
@mixin btn-with-arrow {
  font-size: 17px;
  line-height: 1;
  font-weight: 400;
  color: #122541;
  background-color: var(--color-white);
  border: 1px solid #122541;
  border-radius: 21px;
  position: relative;
  padding: 15px 50px 15px 20px;
  transition: 200ms ease;

  &::after {
    transition: 200ms ease;
    @include elDef();
    width: 22px;
    height: 22px;
    top: 50%;
    transform: translateY(-50%);
    right: 15px;
    @include maskImage(url('../images/icons/arrow.svg'), contain);
    background-color: var(--color-dark);
  }

  &:hover {
    background-color: var(--color-accent);
    border-color: var(--color-accent);
    color: var(--color-white);

    &::after {
      background-color: var(--color-white);
    }
  }

  &:active {
    transform: scale(0.98);
  }
}

// * FONT-SIZES FOR TITLE
@mixin fz40() {
  @include adaptive-value('font-size', 40, 28, 1);
  line-height: 1.1;
  font-weight: 600;
  color: #132134;
}
@mixin fz45() {
  @include adaptive-value('font-size', 45, 28, 1);
  font-size: 45px;
  line-height: 1.2;
  font-weight: 300;
  color: #122541;
}
@mixin fz50() {
  @include adaptive-value('font-size', 50, 30, 1);
}

// * DECOR
@mixin square() {
  position: relative;
  padding-left: 22px;
  &::after {
    @include elDef();
    width: 5px;
    height: 5px;
    background-color: var(--color-accent);
    left: 0;
    top: 50%;
    transform: translateY(-50%);
  }
}

@mixin star() {
  position: relative;
  padding-left: 33px;

  &::after {
    @include elDef();
    width: 20px;
    height: 20px;
    background-color: var(--color-accent);
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    @include maskImage(url('../images/icons/star.svg'), contain);
  }
}
